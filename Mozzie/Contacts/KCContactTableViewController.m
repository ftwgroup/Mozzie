//
//  ContactsViewController.m
//  Mozzie
//
//  Created by Julian Threatt on 9/25/12.
//  Copyright (c) 2012 Julian Threatt. All rights reserved.
//

#import "KCContactTableViewController.h"
#import "KCFaceView.h"
#import "UIColor+FTWColors.h"

#import <MessageUI/MessageUI.h>

@property (nonatomic, readwrite, retain) NITableViewModel *model;
@property (nonatomic, readwrite, retain) NITableViewActions *actions;
- (void)setupTableHeaderView;
@end

@implementation KCContactTableViewController

@synthesize model = _model;
@synthesize updates = _updates;
@synthesize actions = _actions;


- (void)attributedLabel:(NIAttributedLabel*)attributedLabel didSelectTextCheckingResult:(NSTextCheckingResult *)result atPoint:(CGPoint)point {
    NSLog(@"tap");
    // In a later example we will show how to push a Nimbus web controller onto the navigation stack
    // rather than punt the user out of the application to Safari.
    [[UIApplication sharedApplication] openURL:result.URL];
}

- (id)initWithStyle:(UITableViewStyle)style
{
    if (self = [super initWithStyle:UITableViewStyleGrouped]) {
        self.title = @"Contact Name";
        
        // We create a single block that can render a table view cell given an object.
//        NICellDrawRectBlock drawTextBlock = ^CGFloat(CGRect rect, id object, UITableViewCell *cell) {
//            // If the cell is tapped or selected we want to draw the text on top of the selection
//            // background. This requires that the content's background be clear.
//            if (cell.isHighlighted || cell.isSelected) {
//                [[UIColor clearColor] set];
//            } else {
//                [[UIColor whiteColor] set];
//            }
//            
//            // Fill in the content rect.
//            UIRectFill(rect);
//                        
//            NIAttributedLabel* label = [[NIAttributedLabel alloc] initWithFrame:CGRectZero];
//            label.numberOfLines = 1;
//            #if __IPHONE_OS_VERSION_MIN_REQUIRED < NIIOS_6_0
//            label.lineBreakMode = UILineBreakModeWordWrap;
//            #else
//            label.lineBreakMode = NSLineBreakByWordWrapping;
//            #endif
//            label.autoresizingMask = UIViewAutoresizingFlexibleDimensions;
//            label.frame = CGRectInset(cell.contentView.bounds, 20, 20);
//            label.font = [UIFont fontWithName:@"AmericanTypewriter" size:15];
//            
//            // When the user taps a link we can change the way the link text looks.
//            label.attributesForHighlightedLink = [NSDictionary dictionaryWithObject:(id)RGBCOLOR(255, 0, 0).CGColor forKey:(NSString *)kCTForegroundColorAttributeName];
//            
//            // In order to handle the events generated by the user tapping a link we must implement the
//            // delegate.
//            label.delegate = self;
//            
//            // By default the label will not automatically detect links. Turning this on will cause the label
//            // to pass through the text with an NSDataDetector, highlighting any detected URLs.
//            label.autoDetectLinks = YES;
//            
//            // By default links do not have underlines and this is generally accepted as the standard on iOS.
//            // If, however, you do wish to show underlines, you can enable them like so:
//            label.linksHaveUnderlines = YES;
//            
//            label.text = @"A screen on the dash flickers";
//            label.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"bg.png"]];
//            NSRange linkRange = [label.text rangeOfString:@"screen"];
//            
//            // Explicitly adds a link at a given range.
//            [label addLink:[NSURL URLWithString:@"http://th04.deviantart.net/fs71/300W/f/2010/145/c/9/Planet_Concept_1_by_Tenach.jpg"]
//                     range:linkRange];
//            
//            [cell.contentView addSubview:label];
//            
//            // We can optionally return the height of the cell if we want to support variable-height
//            // custom-drawn cells.
//            return 70;
//        };
        
        // This controller uses the Nimbus table view model. In loose terms, Nimbus models implement
        // data source protocols. They encapsulate standard delegate functionality and will make your
        // life a lot easier. In this particular case we're using NITableViewModel with a list of
        // objects.
        //
        // Each of these objects implements the NICellObject protocol which requires the object to
        // implement the method "cellClass". This method is called by the NICellFactory to determine
        // which UITableViewCell implementation should be used to display this object.
        //
        // When a cell is about to be created, the model asks its delegate to create a cell with the
        // given object. In most cases the delegate is [NICellFactory class]. NICellFactory implements
        // the NITableViewModelDelegate protocol as static methods, allowing us to use it as a delegate
        // without instantiating it.
        //
        // Once the cell is created, shouldUpdateCellWithObject: is called on the cell, giving it the
        // opportunity to update itself accordingly.
    
//        NSArray* tableContents =
//        [NSArray arrayWithObjects:
//         // Shows a cell with a title.
//         @"test",
//         [NITitleCellObject objectWithTitle:@"Row 1"],
//         [NITitleCellObject objectWithTitle:@"Row 2"],
//         @"test2",
//         // Shows a cell with a title and subtitle.
//         [NISubtitleCellObject objectWithTitle:@"Row 3" subtitle:@"Subtitle"],
//         [NISubtitleCellObject objectWithTitle:@"Row 4" subtitle:@"Another Subtitle"],
//         nil];
        
        // NITableViewModel may be initialized with two types of arrays: list and sectioned.
        // A list array is a list of objects, where each object in the array will map to a cell in
        // the table view.
        // A sectioned array is a list of NSStrings and objects, where each NSString starts a new
        // section and any other type of object is a cell.
        //
        // As discussed above, we provide the model with the NICellFactory class as its delegate.
        // In a future example we will show how you can create a NICellFactory object to override the
        // default mappings that the cell objects return from their cellClass implementation.
        //
        // Further exploration:
        // Check out the NICellFactory implementation and notice how the NITableViewModelDelegate
        // methods are implemented twice. First as class methods (+ as a prefix), second as
        // instance methods (- as a prefix). This allows you to use NICellFactory's class object as
        // the delegate or to instantiate the NICellFactory as an object and provide explicit mappings.
//        self.model = [[NITableViewModel alloc] initWithSectionedArray:tableContents delegate:(id)[NICellFactory class]];
        
        _actions = [[NITableViewActions alloc] initWithController:self];
    }
    return self;
}



- (void)viewDidLoad
{
    [super viewDidLoad];

    // Table action blocks
    NITableViewActionBlock callBlock = ^BOOL(id object, UIViewController *controller) {
        [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"telprompt://4043131546"]];
        return YES;
    };
    
    NITableViewActionBlock emailBlock = ^BOOL(id object, UIViewController *controller) {
        MFMailComposeViewController *picker = [[MFMailComposeViewController alloc] init];
        picker.mailComposeDelegate = controller;
        
        [picker setSubject:@"test subject"];
        
        NSString *emailBody = @"test body";
        [picker setMessageBody:emailBody isHTML:YES];
        
        picker.navigationBar.barStyle = UIBarStyleBlack;
        
        [controller presentModalViewController:picker animated:YES];
        
        return YES;
    };
    
    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
 
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
    [self setupWho];
    
    NSString* name = (__bridge_transfer NSString*)ABRecordCopyValue(self.person, kABPersonFirstNameProperty);
    //self.firstName.text = name;
    
    NSString* phone = nil;
    NSString* email = nil;
    ABMultiValueRef phoneNumbers = ABRecordCopyValue(self.person,
                                                     kABPersonPhoneProperty);
    ABMultiValueRef emailAddresses = ABRecordCopyValue(self.person, kABPersonEmailProperty);
    ABMultiValueRef social = ABRecordCopyValue(self.person, kABPersonSocialProfileProperty);
    
    if (ABMultiValueGetCount(phoneNumbers) > 0) {
        phone = (__bridge NSString*)ABMultiValueCopyValueAtIndex(phoneNumbers, 0);
    }
    
    if (ABMultiValueGetCount(emailAddresses) > 0) {
        email = (__bridge NSString*)ABMultiValueCopyValueAtIndex(emailAddresses, 0);
    }
    //self.phoneNumber.text = phone;
    
    NSArray *tableContents = [NSArray arrayWithObject:@"Contact"];
    if (phone) {
        tableContents = [tableContents arrayByAddingObject:[_actions attachNavigationAction:callBlock toObject:[NISubtitleCellObject objectWithTitle:@"Mobile Number" subtitle:phone]]];
    }
    if (email) {
        tableContents = [tableContents arrayByAddingObject:[_actions attachNavigationAction:emailBlock toObject:[NISubtitleCellObject objectWithTitle:@"Email" subtitle:email]]];
    }
    
    // Social network updates
    tableContents = [tableContents arrayByAddingObject:@"Updates"];
    for (NSMutableDictionary *update in self.updates) {
        //NSLog(@"result: %@", update);
        NSString *title = [update objectForKey:@"story"];
        tableContents = [tableContents arrayByAddingObject:[NITitleCellObject objectWithTitle:title]];
    }
    self.model = [[NITableViewModel alloc] initWithSectionedArray:tableContents delegate:(id)[NICellFactory class]];

    self.tableView.dataSource = self.model;
    self.tableView.backgroundView = [[UIView alloc] initWithFrame:self.view.bounds];
    self.tableView.backgroundView.backgroundColor = [UIColor backgroundColor];
    self.tableView.delegate = [self.actions forwardingTo:self];
    [self setupTableHeaderView];

}

//-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    
//    CGFloat height;
//    NICellFactory *delegate = self.model.delegate;
//    height = [delegate tableView:tableView heightForRowAtIndexPath:indexPath model:self.model];
//    return height;
//}

-(BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation
{
    return NIIsSupportedOrientation(toInterfaceOrientation);
}

//- (void)didReceiveMemoryWarning
//{
//    [super didReceiveMemoryWarning];
//    // Dispose of any resources that can be recreated.
//}
//
//#pragma mark - Table view data source
//
//- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
//{
//#warning Potentially incomplete method implementation.
//    // Return the number of sections.
//    return 0;
//}
//
//- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
//{
//#warning Incomplete method implementation.
//    // Return the number of rows in the section.
//    return 0;
//}
//
//- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    static NSString *CellIdentifier = @"Cell";
//    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
//    if (cell == nil) {
//        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
//    }
//    
//    // Configure the cell...
//    
//    return cell;
//}
//
///*
//// Override to support conditional editing of the table view.
//- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    // Return NO if you do not want the specified item to be editable.
//    return YES;
//}
//*/
//
///*
//// Override to support editing the table view.
//- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    if (editingStyle == UITableViewCellEditingStyleDelete) {
//        // Delete the row from the data source
//        [tableView deleteRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
//    }   
//    else if (editingStyle == UITableViewCellEditingStyleInsert) {
//        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
//    }   
//}
//*/
//
///*
//// Override to support rearranging the table view.
//- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath
//{
//}
//*/
//
///*
//// Override to support conditional rearranging of the table view.
//- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    // Return NO if you do not want the item to be re-orderable.
//    return YES;
//}
//*/
//
//#pragma mark - Table view delegate
//
//- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
//{
//    // Navigation logic may go here. Create and push another view controller.
//    /*
//     <#DetailViewController#> *detailViewController = [[<#DetailViewController#> alloc] initWithNibName:@"<#Nib name#>" bundle:nil];
//     // ...
//     // Pass the selected object to the new view controller.
//     [self.navigationController pushViewController:detailViewController animated:YES];
//     */
//}

#pragma mark Person Info
- (void)setupWho {
    //NSString* name = (__bridge_transfer NSString*)ABRecordCopyValue(self.person, kABPersonFirstNameProperty);
    //self.firstName.text = name;
    
    NSString* phone = nil;
    NSString* email = nil;
    ABMultiValueRef phoneNumbers = ABRecordCopyValue(self.person,
                                                     kABPersonPhoneProperty);
    ABMultiValueRef emailAddresses = ABRecordCopyValue(self.person, kABPersonEmailProperty);
    
    if (ABMultiValueGetCount(phoneNumbers) > 0) {
        phone = (__bridge NSString*)ABMultiValueCopyValueAtIndex(phoneNumbers, 0);
    }
    
    if (ABMultiValueGetCount(emailAddresses) > 0) {
        email = (__bridge NSString*)ABMultiValueCopyValueAtIndex(emailAddresses, 0);
    }
    //self.phoneNumber.text = phone;
    
    NSArray *tableContents = [NSArray arrayWithObject:@"Contact"];
    if (phone) {
        tableContents = [tableContents arrayByAddingObject:[NISubtitleCellObject objectWithTitle:@"Mobile Number" subtitle:phone]];
    }
    if (email) {
        tableContents = [tableContents arrayByAddingObject:[NISubtitleCellObject objectWithTitle:@"Email" subtitle:email]];
    }
    tableContents = [tableContents arrayByAddingObject:@"Updates"];
    for (NSMutableDictionary *update in self.updates) {
        //NSLog(@"result: %@", update);
        NSString *title = [update objectForKey:@"story"];
        tableContents = [tableContents arrayByAddingObject:[NITitleCellObject objectWithTitle:title]];
    }
    self.model = [[NITableViewModel alloc] initWithSectionedArray:tableContents delegate:(id)[NICellFactory class]];
    
    self.tableView.dataSource = self.model;
    self.tableView.backgroundView = [[UIView alloc] initWithFrame:self.view.bounds];
    self.tableView.backgroundView.backgroundColor = [UIColor backgroundColor];
    [self setupTableHeaderView];
}
- (void)mailComposeController:(MFMailComposeViewController*)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError *)error
{
    // Notifies users about errors associated with the interface
    switch (result)
    {
        case MFMailComposeResultCancelled:
            break;
        case MFMailComposeResultSaved:
            break;
        case MFMailComposeResultSent:
            break;
        case MFMailComposeResultFailed:
            break;
            
        default:
        {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Email" message:@"Sending Failed - Unknown Error :-("
                                                           delegate:self cancelButtonTitle:@"OK" otherButtonTitles: nil];
            [alert show];
        }
            
            break;
    }
    [self dismissModalViewControllerAnimated:YES];
}
# pragma mark - Methods for rendering the user profile
- (void) setupTableHeaderView
{
    KCFaceView *faceView = [[KCFaceView alloc] initWithNibName:nil bundle:nil];
    faceView.view.backgroundColor = [UIColor backgroundColor];
    if (ABRecordGetRecordType(self.person) == kABPersonType) {
        UIImage *image = [UIImage imageWithData:(__bridge NSData *)(ABPersonCopyImageData(self.person))];
        [faceView addContactImage:image];
        CFStringRef name = ABRecordCopyCompositeName(self.person);
        [faceView addContactName:(__bridge NSString *)(name)];
    }
    self.tableView.tableHeaderView = faceView.view;
}

@end
